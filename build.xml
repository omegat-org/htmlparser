<project name="HTMLParser" default="htmlparser" basedir=".">

  <!-- set global properties for this build -->
  <!--
       Note: These can be overridden on the command line, as in:
       ant -DversionMinor=4 -DversionType=Release\ Build versionSource
  -->
  <property name="versionMajor" value="1"/>
  <property name="versionMinor" value="4"/>
  <property name="versionType" value="Integration Build"/>
  <property name="versionNumber" value="${versionMajor}.${versionMinor}"/>
  <property name="versionQualifier" value="${versionMajor}_${versionMinor}"/>
  <property name="src" value="src"/>
  <property name="docs" value="docs"/>
  <property name="resources" value="resources"/>
  <property name="dist"  value="release/htmlparser${versionQualifier}"/>
  <property name="releaseDir" value="release"/>
  <property name="finalLoc" value="distribution"/>
  <!-- location of junit.jar if there is no link to it in $JAVA_HOME/jre/lib/ext -->
  <property name="junit.jar" value="../nonexistant_directory/junit.jar"/>

  <target name="init" description="initialize version properties">
    <echo message="**********************************"/>
    <echo message="*  Initializing.....             *"/>
    <echo message="**********************************"/>
    <tstamp>
      <format property="TODAY" pattern="yyyyMMdd" locale="en"/>
      <format property="TODAY_STRING" pattern="MMM dd, yyyy"/>
    </tstamp>
    <property name="versionTag" value="${versionQualifier}_${TODAY}"/>
    <echo message="today is ${TODAY_STRING}"/>
    <echo message="versionTag=${versionTag}"/>

    <!-- retrieve VERSION_XXX properties from Parser.java  -->
    <loadproperties srcFile="${src}/org/htmlparser/Parser.java">
      <filterchain>
        <linecontains>
          <contains value="VERSION_"/>
        </linecontains>
    	<filterreader classname="org.apache.tools.ant.filters.StripLineBreaks">
          <param name="linebreaks" value=")&quot;"/>
        </filterreader>
      </filterchain>
    </loadproperties>

    <echo message="previous version number = ${VERSION_NUMBER}"/>
    <echo message="previous version type = ${VERSION_TYPE}"/>
    <echo message="previous version date = ${VERSION_DATE}"/>

    <!-- set property previousVersion to current version -->
    <loadfile srcFile="${src}/org/htmlparser/Parser.java" property="previousTag">
      <filterchain>
        <headfilter lines="1"/>
    	<filterreader classname="org.apache.tools.ant.filters.StripLineBreaks">
          <param name="linebreaks" value="/Piy - A java-based parser for HTML"/>
        </filterreader>
        <striplinebreaks/>
      </filterchain>      		
    </loadfile>
    <echo message="previous version tag = ${previousTag}"/>
  </target>

  <target name="versionSource" depends="init" description="update the version in all java files">
    <echo message="**********************************"/>
    <echo message="*  Incorporating version info    *"/>
    <echo message="**********************************"/>

    <echo message="Replacing version VERSION_NUMBER = ${VERSION_NUMBER} with VERSION_NUMBER = ${versionNumber} in ${src}/org/htmlparser/Parser.java"/>
    <replace file="${src}/org/htmlparser/Parser.java" token="VERSION_NUMBER = ${VERSION_NUMBER}" value="VERSION_NUMBER = ${versionNumber}"/>

    <echo message="Replacing version VERSION_TYPE = &quot;${VERSION_TYPE}&quot; with VERSION_TYPE = &quot;${versionType}&quot; in ${src}/org/htmlparser/Parser.java"/>
    <replace file="${src}/org/htmlparser/Parser.java" token="VERSION_TYPE = &quot;${VERSION_TYPE}&quot;" value="VERSION_TYPE = &quot;${versionType}&quot;"/>

    <echo message="Replacing version VERSION_DATE = &quot;${VERSION_DATE}&quot; with VERSION_DATE = &quot;${TODAY_STRING}&quot; in ${src}/org/htmlparser/Parser.java"/>
    <replace file="${src}/org/htmlparser/Parser.java" token="VERSION_DATE = &quot;${VERSION_DATE}&quot;" value="VERSION_DATE = &quot;${TODAY_STRING}&quot;"/>

    <echo message="Replacing version &quot;${VERSION_NUMBER} (${VERSION_TYPE} ${VERSION_DATE})&quot; with &quot;${versionNumber} (${versionType} ${TODAY_STRING})&quot; in ${docs}/release.txt"/>
    <replace dir="${docs}" value="${versionNumber} (${versionType} ${TODAY_STRING})">
      <include name="release.txt"/>
      <replacefilter token="${VERSION_NUMBER} (${VERSION_TYPE} ${VERSION_DATE})"/>
    </replace>

    <echo message="Replacing version tag ${previousTag} with ${versionTag} in all source files"/>
    <replace dir="${src}" value="${versionTag}">
      <include name="**/*.java"/>
      <include name="**/package.html"/>
      <replacefilter token="${previousTag}"/>
    </replace>
  </target>
 
  <target name="changeLog" depends="init" description="create the change log from CVS logs">
    <!-- ant has a changelog task already, but it outputs XML and doesn't unify dates or spit them out in chronological order -->
    <!-- cvschangelog daysinpast="7" destfile="changelog.xml" / -->
    <!-- so we use cvs2cl instead -->
    <!--
      Note: This relies on being able to perform cvs operations to
      cvs.htmlparser.sorceforge.net by default, so you need to have
      environment variables CVSROOT and CVS_RSH set up and the ssh-agent
      loaded and primed.
      $ ssh-agent
      $ ssh-add
      $ CVSROOT=:ext:derrickoswald@cvs.htmlparser.sorceforge.net:/cvsroot/htmlparser
      $ export CVSROOT
      $ CVS_RSH=ssh
      $ export CVS_RSH
      At this point you should be able to ssh to sourceforge without answering
      password prompts:
      $ ssh -l derrickoswald shell.sourceforge.net
    -->
    <echo message="**********************************"/>
    <echo message="*  Creating change log           *"/>
    <echo message="**********************************"/>
    <echo message="./cvs2cl.pl --no-wrap --separate-header -l &quot;-d'&gt;${VERSION_DATE}'&quot;"/>
    <exec executable="./cvs2cl.pl">
      <arg value="--no-wrap"/>
      <arg value="--separate-header"/>
      <arg value="-l"/>
      <arg value="-d'&gt;${VERSION_DATE}'"/>
    </exec>
  </target>

  <target name="compile" description="compile all java files">
    <echo message="**********************************"/>
    <echo message="*  Compiling....                 *"/>
    <echo message="**********************************"/>

    <!-- Compile the java code in ${src} -->
    <javac srcdir="${src}" includes="org/htmlparser/**" excludes="org/htmlparser/tests/**,org/htmlparser/util/Generate.java" debug="on" />
  </target>

  <!-- Create the distribution of htmlparser.jar -->
  <target name="jar" depends="compile" description="create htmlparser.jar">
    <echo message="**********************************"/>
    <echo message="*  Creating htmlparser.jar....   *"/>
    <echo message="**********************************"/>

    <!-- Create the distribution directory -->
    <mkdir dir="${dist}/lib"/>

    <!-- Put classes and images into the htmlparser.jar file -->
    <jar jarfile="${dist}/lib/htmlparser.jar"
      basedir="${src}"
      includes="**/*.class **/*.gif"
      excludes="org/htmlparser/tests/**/*.class,org/htmlparser/util/Generate.class"
      manifest="${resources}/Manifest.mf">
      <manifest>
        <section name="org/htmlparser/Parser.class">
          <attribute name="Java-Bean" value="True"/>
        </section>
        <section name="org/htmlparser/beans/StringBean.class">
          <attribute name="Java-Bean" value="True"/>
        </section>
        <section name="org/htmlparser/beans/HTMLTextBean.class">
          <attribute name="Java-Bean" value="True"/>
        </section>
        <section name="org/htmlparser/beans/LinkBean.class">
          <attribute name="Java-Bean" value="True"/>
        </section>
        <section name="org/htmlparser/beans/HTMLLinkBean.class">
          <attribute name="Java-Bean" value="True"/>
        </section>
      </manifest>
    </jar>
  </target>

  <!-- Run the unit tests -->
  <target name="test" depends="jar" description="run the JUnit tests">
    <echo message="**********************************"/>
    <echo message="*  Running unit tests....        *"/>
    <echo message="**********************************"/>
    <javac srcdir="${src}" includes="org/htmlparser/tests/**" debug="on">
      <classpath>
        <pathelement location="${junit.jar}"/>
      </classpath>
    </javac>
    <java classname="org.htmlparser.tests.AllTests" fork="yes" failonerror="yes">
      <classpath>
        <pathelement location="${dist}/lib/htmlparser.jar"/>
        <pathelement location="${src}"/>
        <pathelement location="${junit.jar}"/>
      </classpath>
      <arg value="-text"/>
    </java>
  </target>

  <!-- Create the javadoc for the project -->
  <target name="javadoc" depends="init,CopyDoc" description="create JavaDoc (API) documentation">
    <echo message="**********************************"/>
    <echo message="*  Generating Javadoc....        *"/>
    <echo message="**********************************"/>

    <!-- Create the javadoc directory -->
    <mkdir dir="${dist}/docs/javadoc"/>
    
    <property name="javadoc.doctitle" value="&lt;h1>HTML Parser ${versionNumber}&lt;/h1>"/>
    <property name="javadoc.header" value="&lt;A HREF=&quot;http://htmlparser.sourceforge.net&quot; target=&quot;_top&quot;>HTML Parser Home Page&lt;/A>"/>
    <property name="javadoc.footer" value="&amp;copy; 2003 Somik Raha&lt;div align=&quot;right&quot;&gt;${TODAY_STRING}&lt;/div&gt;"/>
    <property name="javadoc.bottom" value="HTML Parser is an open source library released under
    &lt;A HREF=&quot;http://www.opensource.org/licenses/lgpl-license.html&quot;&gt;LGPL&lt;/A&gt;.&lt;BR&gt;
    If you want to be notified when new releases of HTML Parser are available, join the
    &lt;A HREF=&quot;http://lists.sourceforge.net/lists/listinfo/htmlparser-announce&quot;&gt;HTML Parser Announcement List&lt;/A&gt;.&lt;BR&gt;
    If you have questions about the usage of the parser, join the
    &lt;A HREF=&quot;http://lists.sourceforge.net/lists/listinfo/htmlparser-user&quot;&gt;HTML Parser User List&lt;/A&gt;.&lt;BR&gt;
    If you want to join as a developer, please sign up on the
    &lt;A HREF=&quot;http://lists.sourceforge.net/lists/listinfo/htmlparser-developer&quot;&gt;HTML Parser Developer List&lt;/A&gt;.&lt;BR&gt;
    &lt;div align=&quot;right&quot;&gt;&lt;A HREF=&quot;http://sourceforge.net/projects/htmlparser&quot;&gt;&lt;img src=&quot;http://sourceforge.net/sflogo.php?group_id=24399&amp;type=1&quot; width=&quot;88&quot; height=&quot;31&quot; border=&quot;0&quot; alt=&quot;SourceForge.net Logo&quot;&gt;&lt;/A&gt;&lt;/div&gt;"/>

    <javadoc packagenames="org.htmlparser.*"
           sourcepath="${src}"
           defaultexcludes="yes"
           excludepackagenames="org.htmlparser.tests.*"
           destdir="${dist}/docs/javadoc"
           author="true"
           version="true"
           use="true"
           windowtitle="HTML Parser ${versionNumber}">
      <doctitle>${javadoc.doctitle}</doctitle>
      <header>${javadoc.header}</header>
      <bottom>${javadoc.bottom}</bottom>
      <footer>${javadoc.footer}</footer>
      <group title="Main Package" packages="org.htmlparser"/>
      <group title="Example Applications" packages="org.htmlparser.parserapplications"/>
      <group title="Tags" packages="org.htmlparser.tags,org.htmlparser.tags.data"/>
      <group title="Scanners" packages="org.htmlparser.scanners"/>
      <group title="Beans" packages="org.htmlparser.beans"/>
      <group title="Visitors" packages="org.htmlparser.visitors"/>
      <group title="Utility Packages (of developer interest only)" packages="org.htmlparser.util"/>
    </javadoc>         
  </target>

  <!-- Copy the design documentation and release notes into the doc director -->
  <target name="CopyDoc" description="copy documentation to distribution directory">
    <echo message="**********************************"/>
    <echo message="*  Copying Documentation....     *"/>
    <echo message="**********************************"/>

    <copy todir="${dist}/docs">
    	<fileset dir="${docs}"/>
    </copy> 
    <!-- Copy the release notes as readme.txt in the base release directory -->
    <copy file="${docs}/release.txt" tofile="${dist}/readme.txt"/>

  </target>

  <!-- Copy the batch files into the htmlparser release directory -->
  <target name="CopyBatch" description="copy batch files to distribution directory">
    <echo message="**********************************"/>
    <echo message="*  Copying Batch Files....       *"/>
    <echo message="**********************************"/>

     <mkdir dir="${dist}/bin"/>   
     <copy todir="${dist}/bin" >
        <fileset dir="${resources}" includes="*.bat"/>
     </copy>
  </target>

  <!-- The release directory structuring finishes here -->
  <target name="Release" depends="versionSource,jar,javadoc,CopyBatch" description="prepare the release files">
  </target>

  <!-- Package the release, creating the docs gzip also for uploading -->
  <target name="Package" depends="Release,sources" description="glom the release and source files into the distribution zip file">
    <echo message="**********************************"/>
    <echo message="*  Packaging....                 *"/>
    <echo message="**********************************"/>

    <mkdir dir="${finalLoc}"/>
    <zip zipfile="${finalLoc}/htmlparser${versionTag}.zip"
       basedir="${releaseDir}"/>
    <tar tarfile="${finalLoc}/docs.tar" basedir="${dist}/docs"/>
    <gzip zipfile="${finalLoc}/docs.tar.gz" src="${finalLoc}/docs.tar"/>
  </target>
  
  <!-- Prepare the sources zip, allowing folks to build the code -->
  <target name="sources" description="create the source zip">
    <echo message="**********************************"/>
    <echo message="*  Preparing Sources....         *"/>
    <echo message="**********************************"/>

    <mkdir dir="${dist}/sources/src"/>
    <copy todir="${dist}/sources/src">
    	<fileset dir="${src}" includes="**/*.java **/*.html **/*.gif **/*.form **/*.properties"/>
    </copy>
    <copy file="build.xml" todir="${dist}/sources"/>
	<mkdir dir="${dist}/sources/resources"/>
	<copy todir="${dist}/sources/resources" >
        <fileset dir="${resources}"/>
    </copy>
    <mkdir dir="${dist}/sources/docs"/>
    <copy todir="${dist}/sources/docs">
    	<fileset dir="${docs}"/>
    </copy>
    <zip zipfile="${dist}/src.zip"
       basedir="${dist}/sources"/>
    <delete dir="${dist}/sources"/>
  </target>

	<target name="clean" description="cleanup">
		<echo message="**********************************"/>
		<echo message="*  Cleaning up and finishing.... *"/>
		<echo message="**********************************"/>

		<!-- delete the release directory -->
		<delete dir="${releaseDir}"/> 
		<!-- delete the classes -->
		<delete>
			<fileset dir="${src}" includes="**/*.class"/>
		</delete>
	</target>
	
  <!-- Perform the htmlparser integration -->
  <target name="htmlparser" depends="Package,clean" description="same as Package plus cleanup">
  </target>
	
</project>
